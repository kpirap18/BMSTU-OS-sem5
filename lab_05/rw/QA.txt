1 - В программе читатели писатели имеется ли потерянное обновление? 
Ответ обосновать!
-- Да имеется. По алгоритму читатель не может начать читать, если есть 
работающий писатель и ждущие писатели.

2 - Основное свойство набора семафоров?
-- Основным свойством набора семафоров является возможность 
одной неделимой операцией изменить значения всех или части семафоров набора.

3 - Охарактеризуйте основную особенность задачи "производство-потребление", 
которая определила ее название.
-- Особенность задачи "производство-потребление" является наличие
 двух видов процессов: один процесс производит данные, 
 другой процесс - считывает эти данные.

4 - В какой области памяти создается буфер и почему?
-- В области данных ядра системы потому, что адресные пространства 
процессов защищены, т.е ни один процесс не может обратиться
 в адресное пространство другого процесса.

5? - Охарактеризуете эти две задачи.
В чем из особенности, которые выделяют их из других задач?
-- Работа выполняется на примере двух задач, характерных для 
  взаимодействия асинхронных параллельных процессов: 
  «производство-потребление» и «читатели-писатели».

От винтерпумы
6 - Когда могут блокироваться процессы? 
-- На семафоре, когда активен другой процесс

###### Читатели-писатели

7 - В каком режиме работают писатели?  
-- В режиме монопольного доступа к разделяемой переменной

8 - Что за структуру создали?  
-- Структура описывает действия, которые мы будем производить 
с нашими процессами (с набором семафоров). 
Первое значение в тройке является ИНДЕКСОМ, второе действием, 
третье флагом (если стоит 0, значит флаг отсутствует)

9 - Зачем нужен массив структур?   
-- Чтобы производить неделимую операцию над набором семафоров.

10? - На чем могут быть блокированы читатели/писатели?
-- Если кто то пишет или есть писатели, ждущие своей очереди, то читатель
переводится в состояние ожидание на переменной типа условие canread

11 - Чем обусловлено потерянное обновление?  
Потерянное обновление - это когда несколько писетелей подряд записали данные. 
(читатель не прочитал обновленные данные).   
Все ок:  
	1. writer: a = 1  
	2. reader: a = 1  
	3. writer: a = 2  
Есть потерянное обновление:  
	* reader: a = 0  
	* writer: a = 1  
	* writer: a = 2  
	* reader: a = 2   
  
* Потерянное обновление обусловлено особенностью алгоритма. 
При выходе из писателя писатель проверяет, нет ли у нас ждущих 
писателей, 
   * если нет таковых, то выдается разрешение на чтение, 
   * если есть ждущие писатели, то писатели пишут до тех пор пока 
   не освободится очередиь писателей. (читатели в это время не могут читать)

12 - Что тогда делается с бесконечным откладыванием?
-- При входе в процедуру star_read новый процесс читатель сможет начать работать, 
если нет процесса писателя, изменяющего данные, в которых заинтересован читатель,
 и нет писателей, ждущих свою очередь (turn(can_write)), чтобы изменить 
 эти данные. Второе условие нужно для предотвращения бесконечного откладывания 
 процессов писателей в очереди писателей.  
-- Когда писатель заканчивает работу, предпочтение отдается читателям при условии,
 что очередь ждущих читателей не пуста. Иначе для писателей устанавливается 
 переменная can_write. Таким образом исключается бесконечное откладывание читателей.

Вопрос от Арины 
** - Зачем вы проверяете ожидающих писателей на 0?
-- У писателей есть приоритет перед читателями. И проверка ожидающих писателей на 0 
выполняется, чтобы проверить нет ли в очереди ждущих писателей, и если таковых нет,
то процесс-читатель получает возможность начать читать.

####### Потребители-производители

13????? - На чем может быть блокирован потребитель? 
-- На бинарном семафоре и на семафоре потребителей

14? - На чем может быть блокирован производитель/потребитель?
-- Если покупатель работает быстрее, то покупатель будет блокирован на SF,
так как нет заполненых ячеек
-- Если продавец работает быстрее, то при попытке декрементировать SE, продавец
будет блокирован. Изменение N – критическая секция

--- продюсер будет блокирован на семафоре se, когда se=0 (нет пустых ячеек)
если есть пустые ячейки, то продюсер декрементирует se и проверяет sb,
если consumer ничего из буфера не вытаскивает, то он спокойно входит в критический
участок, создает единицу продукции и инкриминирует кол-во заполненных ячеек

consumer будет блокировать на семафоре se, если se = 0
если sf > 0, то consumer декрементирует кол-во заложенных ячеек

если путь свободен, то входит в свой критический участок, черед единицу продукции,
выходит из критического участка и инкрементирует…..
sb обеспечивает монопольный доступ к разделяемой переменной


15 - Зачем нужен каждый конкретный семафор?   
   * бинарный для предотвращения одновременного доступа производителя и потребителя,   
   * производства: для блокировки производителя при заполнении буфера,   
   * потребителя: для блокировки потребителя при пустом буфере.  
