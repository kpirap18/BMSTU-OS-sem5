
 1 - какую программу мы написали? 
 - программу 0 уровня привелении в ЗР 
 
 
 
 2 - что пришлось создать в этой программе? 
 - 2 таблицы 
  Табл. дескр. прер. и табл. дескр. сегментов
  GDT и IDT 
  
  про DPL (в дескрипторе - атрибут 5 и 6 бит) и RPL(в селекторе 0 1 бит)
 3 - Где явно установлен соответсвующий уровень привелегий? 
 - из-за того, что мы используем таблицы IDT и GDT
 
 
 
 Привелегии и приоритеты - разные вещи
 привелегии это 4 кольца защиты
 приоритеты - это приоритет процессов потоков, которые назначаются и может быть пересчитан)
 
 Процессы выстариваются в очередь в соответствии с их приоритеттами
 
 
 
 
 4 - Какие сегменты мы описали в глобальной таблицы, и почему, для чего? - сегменты памяти
  - сегменты памяти ( 16б сегмент кода
					  32б сегмент кода
					  32б сегмент данных (4Гб)
					  32б сегмент данных
					  32б сегмент стека
					  16б сегмент видеобуффера)
 
 
 5 - Охариктиризовать дескриптор сегмента доп памяти, который мы описали?
 - на листке
 gdt_data4gb descr <0FFFFh,0,0,92h,0CFh,0>
 
 
 
 6 - Почему таблица дескрипторов прерываний имеет такую структуру?
  -  !!! От 0 до 31 - это исключения (внутренние прерывания).
     Дескрипторы в таблице прерываний должны быть расположены по порядку 
     Их векторов. Поэтому мы их все тут по порядку прописываем.
	 описаны шлюзы - 8Fh - ловушки 8Eh - прерывание 
 
	 ; Исключение общей защиты.
     ; Выделеяем отдельно, чтобы в дальнейшем смогли его отдельно обработать, 
     ; T.к. там нужно еще учитывать код ошибки.
	 
	 ; 10001110 - Eh - шлюз прерываний - служит для обработки прерывания.
     int08 idescr <0,code32s,0,10001110b,0> 
     int09 idescr <0,code32s,0,10001110b,0>
 
 
 7 - Что вы написали для исключений? 
 - обработчик 13 исключения (заглушки)
 - обработчик других исключений
 
 
 8 - Как адресуются аппаратные прерывания в ЗР? 
 - Контроллер прерывания получает сигнал о прерывании и 
 формирует вектор прерывания, который содержит селектор из ТДП.
Взяв значение из регистра IDTR значение базового адреса ТДП. 
В нём по селектору находим

По этому дискриптору мы находим дескриптор который уже 
и содержит селектор, смещение и аттрибуты

По селектору выбираем дискриптор из ТГД, берём оттуда
 базовый адрес сегмента и прибавляем его к смещению

Получаем линейный адрес обработчика прерывания


 
 9 - Когда вызывается обработчик прерываний от клавиатуры, а когда от системног таймера?
 - от клавиатуры, когда нажимаем на клавишу, и когда отжимаем, от таймера 18.2 рада в секунду
 
 
 10 - Какие действия необходимо выполнить для корректного возвращения в РР?
 1. Устанавливаем флаг перех. в рр
 2. Запрещаем маскируемые прерывания
 3. Переходим в реальный
 4. Через команду far jmp, заданную прямо кодом, обновляем значение 
	в теневом регистре, связанном с CS
 5. Обновляем остальные теневые регистры значениями
 6. Возвращаем маски контроллерам прерываний, возращаем значение базового 
	вектора прерывания (8, не 32)
 7. Возвращаем базовый линейный адрес таблице векторов прерываний
 8. Разрешаем немаскируемые
 9. Разрешаем маскируемые
 10. Печатаем сообщение с помощью функций Dos
 11. Выходим через функцию DOS 
 
 
 11 - Теневые регистры - что это и для чего они включены в процессор? 
 какую инфу содержат?
 - Теневые регистры находятся в процессоре. Нужны чтоб исключить постоянные обращения 
 к физической памяти. Тк мы обращаемся к физ. памяти на каждой команде, 
 а то и несколько раз, особенно если адресация косвенная
 
 12 - Линия А20? Что произойдет , если мы при переходе в ЗР забудем открыть линию А20? 
 - Нам не доступны адреса, в которых 20-ая адресная линия 1.
 Перед переходом в защищенный режим (или после перехода в него) 
следует открыть линию А20, т.е. адресную линию, на которой устана
вливается единичный уровень сигнала, если происходит обращение к 
мегабайтам адресного пространства с номерами·l, 3, 5 и т.д. (первый
мегабайт имеет номер 0). В реальном режиме линия А20 заблокирована,
и если значение адреса выходит за пределы FFFFFh, выполняется его
циклическое оборачивание (линейный адрес lOOOOOh превращается в 
OOOOOh, а.црсс lOOOOlh ·.в 00001h и т.д.)

Открытие (разблокирование) линии А20 выключает механизм циклическою оборачивания адреса,
что позволяет адресоваться к расширенной nамяти. Управление блокированием 
линии А20 осуществляется через порт 64h, куда сначала следует послать команду D1h управления
линией А20, а затем - код открытия (Dfh). 

Перед переходом в реальный режим следуеТ закрыть линию А20,
для чего в порт 64h посылается команда Dlh управления линией А20, а 
затем - код закрытия линии (DDh). 


 13  - ЧТо произойдет, если при возвращении в РР забудем закрыть линию А20? 
 - нам будут доступны Мб с номерами 1 3 5...
 
 14 - Что мы делаем в обработчике прерывания таймера?
 - Инкреминтирует счетчик времени и выводит опозновательный символ на экран
 

 15 - 64 мб это какая память?
 - Память, доступная досу
 
 
 16 - Что делает 13 dup? 
 Выделяет, но как? 
 Почему не выделяем подряд 13 дескрипторов, почему так написали?
 - Выделяет память под прерывания подряд в памяти 
 
 
 17 - Чем является базовый вектор прерываний?
 - смещение в таблице дескрипторов прерываний
 
 
 18 - Чему кратно значение селектора?»
 - красно 8
 
 
 19 - «Что такое индекс?»
 - смещение в таблице прерывания
 
 
 20 - «В реальном режиме есть привилегии?»
 - нет
 
 
 21 - «Как вы считаете объем оперативной памяти?»
 - «У нас есть сегмент, объемом в 4 гигабайта. 
 Считываем значение из ячейки памяти. 
 Сохраняем его. 
 Записываем в ячейку свое значение. 
 Считываем. 
 Если записанное и считанное значения совпадают, то это память.

Возвращаем в ячейку первоначальное значение. 
Если значение не совпадают, то пустота. 
Мы действуем до первого прокола»
 
 
 22 - «Какой формат дескриптора?»
 - 
 
 
 23 - «Какие характеристики имеет сегмент «памяти»?»
 - 
 
 
 24 - «Почему вы в реальном режиме используете привилегированную команду lgdt?»
 - мы делаем .386p
 
 
 25 - Каким образом мы перепрограммируем контроллер прерываний? Почему?
 - 
 
 
 26 - В чем особенность 32разрядного сегмента данных?
 - 
 
 
 
 27 - Что мы делаем с масками прерываний?
 - Маски - перед переходом в защищенный режим у контроллера 
 ведущего и ведомого есть свои маски. Мы их сохраняем, чтоб
 потом восстановить. Мы их сохраняем, потому что мы ставим
 свои - теряем информацию о том что было. Потом их надо вернуть.
 
 
 
 
 